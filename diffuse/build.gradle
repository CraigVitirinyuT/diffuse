apply plugin: 'java-library'
apply plugin: 'org.jetbrains.kotlin.jvm'

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

configurations {
  r8
}

dependencies {
  implementation deps.clikt
  implementation deps.androidTools.dalvikDx
  api deps.kotlin.stdlibJdk8
  implementation project(':picnic')
  api deps.okio
  implementation deps.androidTools.binaryResources
  implementation deps.androidTools.apkSigner
  implementation deps.byteunits
  implementation deps.asm

  testImplementation deps.junit
  testImplementation deps.truth

  r8 deps.r8
}

def shrunkDiffuseFile = new File(buildDir, "libs/$archivesBaseName-$version-shrunk.jar")
def shrinkDiffuse = tasks.register('shrinkDiffuse', JavaExec) { task ->
  def runtimeClasspath = configurations.named('runtimeClasspath')
  task.dependsOn(runtimeClasspath)
  task.dependsOn(tasks.getByName('jar'))

  task.classpath(configurations.named('r8'))
  task.main('com.android.tools.r8.R8')

  task.doFirst {
    def arguments = [
        '--release',
        '--classfile',
        '--no-desugaring',
        '--output', shrunkDiffuseFile.absolutePath,
        '--pg-conf', file('r8-rules.pro').absolutePath,
        '--lib', "${System.getProperty('java.home')}/lib/rt.jar"
    ]
    arguments.addAll(runtimeClasspath.get().files.collect { it.absolutePath })
    arguments.addAll(jar.archivePath.absolutePath)
    task.args(arguments)
  }
}

def fatDiffuseJarProvider = tasks.register('fatDiffuseJar', Jar) { task ->
  task.dependsOn(shrinkDiffuse)
  task.from(zipTree(shrunkDiffuseFile))

  task.exclude("**/*.kotlin_metadata")
  task.exclude("**/*.kotlin_module")
  task.exclude("**/*.kotlin_builtins")
  task.exclude("**/pom.xml")
  task.exclude("**/pom.properties")
  task.exclude("META-INF/proguard/**")

  task.classifier 'fat'

  task.manifest {
    attributes 'Main-Class': 'com.jakewharton.diffuse.Diffuse'
  }
}

def binaryDiffuseFile = new File(buildDir, "libs/$archivesBaseName-$version-binary.jar")
def binaryDiffuseJar = tasks.register('binaryDiffuseJar') { task ->
  def fatDiffuseJar = fatDiffuseJarProvider.get()
  task.dependsOn(fatDiffuseJar)

  task.inputs.file(fatDiffuseJar.archiveFile)
  task.outputs.file(binaryDiffuseFile)

  task.doLast {
    def fatJarFile = fatDiffuseJar.archivePath

    binaryDiffuseFile.getParentFile().mkdirs()
    binaryDiffuseFile.delete()
    binaryDiffuseFile << "#!/bin/sh\n\nexec java -jar \$0 \"\$@\"\n\n"
    fatJarFile.withInputStream { binaryDiffuseFile.append it }

    binaryDiffuseFile.setExecutable true, false
  }
}

def copyDiffuseBinary = tasks.register('copyDiffuseBinary', Copy) { task ->
  task.dependsOn(binaryDiffuseJar)

  task.from(binaryDiffuseFile)
  task.into buildDir
  task.rename(".*", 'diffuse')
}

tasks.named('assemble').configure { task ->
  task.dependsOn(copyDiffuseBinary)
}

artifacts {
  archives file: binaryDiffuseFile, name: 'binary', type: 'jar', builtBy: binaryDiffuseJar, classifier: 'diffuse'
}

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
